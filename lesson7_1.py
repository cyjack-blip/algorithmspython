# Отсортируйте по убыванию методом пузырька одномерный целочисленный массив,
# заданный случайными числами на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
# Примечания:
# a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
# b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
# Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.
#

from random import randint


def bubble(a):
    """сортировка пузырьком"""
    N = len(a)
    cnt = 0
    for i in range(N-1):
        for j in range(N-i-1):
            cnt += 1
            if a[j] < a[j+1]:
                a[j], a[j+1] = a[j+1], a[j]
    return cnt


def bubble2(b):
    """умная сортировка пузырьком
    к стандартному алгоритму пузырька максимального числа, добавлен поиск минимального числа в том же цикле,
    из-за этого число сравнений уменьшается вдвое"""
    N = len(b)
    cnt = 0
    for j in range(N - 1):
        f = 0
        min = j
        for i in range(j, N - j - 1):
            cnt += 1
            if b[i] < b[i+1]:
                b[i], b[i+1] = b[i+1], b[i]
                f = 1
            if b[i] > b[min]:
                min = i
        if f == 0:
            break
        if min != j:
            b[j], b[min] = b[min], b[j]
    return cnt


N = 20
a = []
b = []
for i in range(N):
    tm = randint(-100, 99)
    a.append(tm)
    b.append(tm)
print(f'исходный список:\n{a}')
print('*' * 50)

print(f'простая сортировка пузырьком: {bubble(a)} сравнений')
print(a)
print('*' * 50)
print(f'модифицированная сортировка пузырьком: {bubble2(b)} сравнений')
print(b)
